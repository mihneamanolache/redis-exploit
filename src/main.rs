use dialoguer::{theme::ColorfulTheme, Select};
use ipnetwork::IpNetwork;
use redis::Commands;
use std::env;
use std::println;

fn is_valid_ip_range(ip_range: &str) -> bool {
    match ip_range.parse::<IpNetwork>() {
        Ok(ip_network) => ip_network.is_ipv4() || ip_network.is_ipv6(),
        Err(_) => false,
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if let Some(range) = args.get(1) {
        if !is_valid_ip_range(&range) {
            println!("\x1b[31m[!] Range {:?} is not valid(i.e. 0.0.0.0/24)!\x1b[0m", &range);
            std::process::exit(1)
        }
        println!("\x1b[34m[i] Testing range {:?} for Redis Vulnerability\x1b[0m", &range);
        let network: IpNetwork = range.parse().unwrap();
        if let IpNetwork::V4(network) = network {
            for ip in network.iter() {
                println!("\x1b[34m  [i] Checking IP {:?}\x1b[0m", &ip);
                let target: String = format!("redis://{}", ip);
                let client = redis::Client::open(target).unwrap();
                let connection: Result<redis::Connection, redis::RedisError> =
                    client.get_connection();
                match connection {
                    Ok(mut con) => {
                        println!("\x1b[34m      [+] {} may be vulnerable to an attack!\x1b[0m", &ip);
                        let keys: Result<Vec<String>, redis::RedisError> = con.keys("*");
                        match keys {
                            Ok(keys) => {
                                let options = &["Abort and inform server owner", "Dump data!"];
                                let selection = Select::with_theme(&ColorfulTheme::default())
                                    .with_prompt(
                                        "\x1b[34mHow do you wish to proceed? Please select an action:\x1b[0m",
                                    )
                                    .items(options)
                                    .default(0)
                                    .interact()
                                    .unwrap();

                                match selection {
                                    0 => {
                                        println!("\x1b[33m[i] Aborting! Please contact the server owner and inform them about the vulnerability!\x1b[0m");
                                        std::process::exit(1)
                                    }
                                    1 => {
                                        let options_dump = &["NO", "Yes"];
                                        let selection_dump = Select::with_theme(&ColorfulTheme::default())
                                            .with_prompt("\x1b[34mDo you have server owner's approval to dump date from this server?\x1b[0m")
                                            .items(options_dump)
                                            .default(0)
                                            .interact()
                                            .unwrap();

                                        match selection_dump {
                                            0 => {
                                                println!("\x1b[33m[i] Aborting! Please contact the server owner and inform them about the vulnerability!\x1b[0m");
                                                std::process::exit(1)
                                            }
                                            1 => {
                                                println!("\x1b[32m[+] Dumping data from {:?}...\x1b[0m", &ip);
                                                for key in &keys {
                                                    println!("\x1b[32m  [key] {}\x1b[0m", &key);
                                                }
                                                std::process::exit(0);
                                            }
                                            _ => unreachable!(),
                                        }
                                    }
                                    _ => unreachable!(),
                                }
                            }
                            Err(err) => println!(
                                "\x1b[33m      [-] False positive! {} not vulnerable! Err: {}\x1b[0m",
                                &ip, &err
                            ),
                        }
                    }
                    Err(e) => println!("\x1b[33m      [-] Port closed on {}. Err: {}\x1b[0m", &ip, &e),
                }
            }
        }
    } else {
        println!("\x1b[33m[!] Please add a range. i.e. ./redis-exploit <RANGE> (0.0.0.0/24)\x1b[0m")
    }
}
